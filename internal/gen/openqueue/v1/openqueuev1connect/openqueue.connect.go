// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openqueue/v1/openqueue.proto

package openqueuev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openstatushq/openqueue/internal/gen/openqueue/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueueServiceName is the fully-qualified name of the QueueService service.
	QueueServiceName = "openqueue.v1.QueueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueueServicePushProcedure is the fully-qualified name of the QueueService's Push RPC.
	QueueServicePushProcedure = "/openqueue.v1.QueueService/Push"
)

// QueueServiceClient is a client for the openqueue.v1.QueueService service.
type QueueServiceClient interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
}

// NewQueueServiceClient constructs a client for the openqueue.v1.QueueService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	queueServiceMethods := v1.File_openqueue_v1_openqueue_proto.Services().ByName("QueueService").Methods()
	return &queueServiceClient{
		push: connect.NewClient[v1.PushRequest, v1.PushResponse](
			httpClient,
			baseURL+QueueServicePushProcedure,
			connect.WithSchema(queueServiceMethods.ByName("Push")),
			connect.WithClientOptions(opts...),
		),
	}
}

// queueServiceClient implements QueueServiceClient.
type queueServiceClient struct {
	push *connect.Client[v1.PushRequest, v1.PushResponse]
}

// Push calls openqueue.v1.QueueService.Push.
func (c *queueServiceClient) Push(ctx context.Context, req *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return c.push.CallUnary(ctx, req)
}

// QueueServiceHandler is an implementation of the openqueue.v1.QueueService service.
type QueueServiceHandler interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
}

// NewQueueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueueServiceHandler(svc QueueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queueServiceMethods := v1.File_openqueue_v1_openqueue_proto.Services().ByName("QueueService").Methods()
	queueServicePushHandler := connect.NewUnaryHandler(
		QueueServicePushProcedure,
		svc.Push,
		connect.WithSchema(queueServiceMethods.ByName("Push")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openqueue.v1.QueueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueueServicePushProcedure:
			queueServicePushHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueueServiceHandler struct{}

func (UnimplementedQueueServiceHandler) Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openqueue.v1.QueueService.Push is not implemented"))
}
